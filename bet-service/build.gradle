plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id "org.springdoc.openapi-gradle-plugin" version "1.4.0"
	id 'java'

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

targetCompatibility = '17'
def dockerOwner = 'igabice'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.17.3")
}

dependencies {
	compileOnly("org.projectlombok:lombok")
	annotationProcessor("org.projectlombok:lombok")
	testCompileOnly("org.projectlombok:lombok")
	testAnnotationProcessor("org.projectlombok:lombok")

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'


	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
    implementation 'org.projectlombok:lombok:1.18.18'
    runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'


	runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.9.0'
	implementation("org.springdoc:springdoc-openapi-ui:1.6.4") //3.0.0

}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

openApi {
	apiDocsUrl.set("http://localhost:8080/v3/api-docs.yaml")
	outputDir.set(file("docs"))
	outputFileName.set("openapi.yaml")
//	forkProperties.set("-Dserver.port=9090")
	waitTimeInSeconds.set(60)
}

//openApi {
//	apiDocsUrl.set("https://localhost:9000/api/docs")
//	outputDir.set(file("$buildDir/docs"))
//	outputFileName.set("swagger.json")
//	waitTimeInSeconds.set(60)
////	groupedApiMappings.set(["https://localhost:8080/v3/api-docs/groupA" to "swagger-groupA.json",
////							"https://localhost:8080/v3/api-docs/groupB" to "swagger-groupB.json"])
//	customBootRun {
//		args.set(["--spring.profiles.active=special"])
//	}
//}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	useJUnitPlatform()
}